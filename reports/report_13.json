{
  "meta": {
    "path": "/Users/chinmaychaudhari/Desktop/Recusion/shortGen",
    "analyzed_at": "2025-09-14T17:29:27.081922",
    "rag_indexed": false,
    "rag_warning": "Indexing failed: 'NoneType' object has no attribute 'add_documents'"
  },
  "summary": "Analyzed at 2025-09-14T17:29:27.081922. Found 8 issues across 19 files. Overall score: 85/100.",
  "overall_score": 85,
  "issues": [
    {
      "id": "PY-CPLX-5ed12b5b9a59",
      "category": "complexity",
      "severity": "high",
      "score": 80,
      "file": "core/video_processor.py",
      "lineno": 22,
      "message": "Function 'process_video' has high complexity (cc=33).",
      "suggested_fix": "Refactor function to reduce complexity.",
      "evidence": "def process_video(video_path, jobs, job_id, num_highlights=3, highlight_duration=(20, 30)):\n    \"\"\"Process a video file to generate highlights\"\"\"\n\n# another\n    try:\n        job_folder = os.path.join(",
      "llm_explanation": {
        "issue_id": "PY-CPLX-5ed12b5b9a59",
        "explanation": "The `process_video` function has a very high cyclomatic complexity of 33. This indicates that the function contains an excessive number of decision points (e.g., `if`/`else` statements, `for`/`while` loops, `switch` statements, boolean operations), making it extremely difficult to understand, test, debug, and maintain. High complexity often suggests the function is doing too many things or is poorly structured.",
        "fix_plan": [
          "**Analyze Responsibilities:** Even without the code, a complexity of 33 strongly suggests the function is violating the Single Responsibility Principle. Identify all the distinct operations and sub-tasks `process_video` is currently performing (e.g., video decoding, frame processing, audio extraction, metadata analysis, output encoding, error handling, etc.).",
          "**Extract Smaller Functions/Methods:** Refactor by extracting logical blocks of code into new, well-named, smaller functions or private methods. Each new function should ideally have one clear, single responsibility. For example, `extract_audio_track()`, `analyze_frame_content()`, `apply_watermark()`, `encode_output_video()`, etc.",
          "**Introduce Helper Classes (if applicable):** If several related sub-tasks are identified (e.g., multiple video analysis steps, different encoding strategies), consider creating dedicated helper classes (e.g., `VideoFrameAnalyzer`, `AudioProcessor`, `VideoEncoder`) to encapsulate specific logic and further reduce the `process_video` function's role to orchestrating these components.",
          "**Simplify Conditional Logic:** Look for opportunities to simplify complex `if`/`else` chains or nested loops. This might involve using a strategy pattern, polymorphism, guard clauses, or breaking down conditions into smaller, more manageable checks.",
          "**Iterative Refactoring:** Tackle the complexity reduction in small, incremental steps. After each extraction or simplification, run existing tests (if any) to ensure no regressions are introduced. This is crucial for high-complexity functions where changes can have wide-ranging impacts.",
          "**Add Unit Tests:** As new, smaller functions are created, write dedicated unit tests for them. This will make future maintenance and refactoring easier and safer."
        ],
        "sources": [],
        "confidence": "high"
      }
    },
    {
      "id": "PY-SEC-2b0791f96540",
      "category": "security",
      "severity": "high",
      "score": 80,
      "file": "features/scene_intensity.py",
      "lineno": 12,
      "message": "Use of dangerous function 'eval'.",
      "suggested_fix": "Avoid using eval/exec; consider safer alternatives.",
      "evidence": "model.eval()",
      "llm_explanation": {
        "issue_id": "PY-SEC-2b0791f96540",
        "explanation": "The `eval()` function executes a string as a Python expression. This is a severe security risk because if the input string originates from an untrusted source (e.g., user input, external file, network), an attacker could inject malicious code. This code would then be executed with the full privileges of the application, potentially leading to data breaches, system compromise, or denial of service.",
        "fix_plan": [
          "**Identify the purpose of `eval()`:** Determine what type of data or expression `eval()` is currently being used to process. Common uses include parsing literal Python data structures (like lists, dictionaries, numbers) or simple mathematical expressions.",
          "**Replace with `ast.literal_eval()` for Python literals:** If `eval()` is used to safely evaluate strings containing Python literal structures (strings, numbers, tuples, lists, dicts, booleans, and None), replace it with `ast.literal_eval()` from the `ast` module. This function provides a secure way to evaluate such literals without executing arbitrary code. Remember to `import ast`.",
          "**Alternatively, use `json.loads()` for JSON data:** If the string is formatted as JSON, use `json.loads()` from the `json` module instead. Remember to `import json`.",
          "**Refactor for dynamic attribute/method access:** If `eval()` is used to dynamically access object attributes or call methods, replace it with `getattr()` or a dictionary mapping string names to functions/attributes. This provides a controlled and safe way to achieve dynamic behavior.",
          "**For mathematical expressions, use a dedicated parser or sanitize rigorously:** If `eval()` is used for mathematical calculations, consider using a dedicated, safer math expression parser library. If a library is not feasible, rigorously sanitize and validate the input to ensure it only contains allowed mathematical operators and numbers, and construct the expression carefully, avoiding direct `eval()`."
        ],
        "sources": [],
        "confidence": "high"
      }
    },
    {
      "id": "PY-CPLX-b8efa0537e7c",
      "category": "complexity",
      "severity": "high",
      "score": 80,
      "file": "utils/process_video_and_score.py",
      "lineno": 115,
      "message": "Function 'process_video' has high complexity (cc=33).",
      "suggested_fix": "Refactor function to reduce complexity.",
      "evidence": "def process_video(video_path, jobs, job_id, num_highlights=3, highlight_duration=(20, 30)):\n    \"\"\"Process a video file to generate highlights\"\"\"\n\n# another\n    try:\n        job_folder = os.path.join(",
      "llm_explanation": {
        "issue_id": "PY-CPLX-b8efa0537e7c",
        "explanation": "The `process_video` function has a very high cyclomatic complexity (33), indicating it likely performs too many distinct operations, has excessive conditional branching, or deeply nested logic. This makes the function difficult to understand, test, maintain, and prone to bugs, violating the Single Responsibility Principle.",
        "fix_plan": [
          "**Analyze and Identify Sub-Tasks:** Carefully examine the `process_video` function to identify distinct logical blocks, responsibilities, or different stages of video processing (e.g., loading, frame extraction, analysis, scoring, saving results).",
          "**Extract Functions for Core Responsibilities:** Break down these identified sub-tasks into separate, smaller, and more focused private or helper functions. For instance, if it handles frame extraction, object detection, and score calculation, each could become its own function.",
          "**Simplify Conditional Logic:** Refactor complex `if/elif/else` chains or nested loops. Consider using polymorphism, strategy patterns, or lookup tables if multiple conditions lead to different but related actions.",
          "**Introduce Data Structures:** If the function processes various types of data or configurations, consolidate them into data classes or dictionaries to reduce the number of parameters and conditional checks.",
          "**Iterative Refactoring:** Extract one or two clear sub-functions at a time, then re-evaluate the complexity of the original function and the new ones. Repeat the process until the complexity is significantly reduced (ideally below 10 for the main function and its helpers).",
          "**Test Thoroughly:** Ensure that existing tests pass after each refactoring step. If tests are absent, add them for the new, smaller, and more testable functions."
        ],
        "sources": [],
        "confidence": "high"
      }
    },
    {
      "id": "PY-SEC-70ee9d6690bf",
      "category": "security",
      "severity": "high",
      "score": 80,
      "file": "utils/scene_intensity.py",
      "lineno": 12,
      "message": "Use of dangerous function 'eval'.",
      "suggested_fix": "Avoid using eval/exec; consider safer alternatives.",
      "evidence": "model.eval()"
    },
    {
      "id": "PY-CPLX-7a797b2aebdb",
      "category": "complexity",
      "severity": "high",
      "score": 80,
      "file": "utils/youtube_uploader.py",
      "lineno": 386,
      "message": "Function 'interactive_analytics' has high complexity (cc=36).",
      "suggested_fix": "Refactor function to reduce complexity.",
      "evidence": "def interactive_analytics():\n    \"\"\"\n    Interactive function to explore your YouTube analytics.\n    \"\"\"\n    # Authenticate and build the service\n    youtube, youtube_analytics = get_authenticated_ser"
    },
    {
      "id": "PY-CPLX-da42ff94c89d",
      "category": "complexity",
      "severity": "high",
      "score": 80,
      "file": "api/youtube_routes.py",
      "lineno": 42,
      "message": "Function 'upload_to_youtube' has high complexity (cc=13).",
      "suggested_fix": "Refactor function to reduce complexity.",
      "evidence": "def upload_to_youtube():\n    \"\"\"\n    Endpoint to upload a video to YouTube.\n    \n    Expected JSON payload:\n    {\n        \"video_id\": \"job_id_of_processed_video\",\n        \"highlight_index\": 0,  # (opt"
    },
    {
      "id": "PY-CPLX-93a5ea6fba4c",
      "category": "complexity",
      "severity": "high",
      "score": 80,
      "file": "services/youtube_uploader.py",
      "lineno": 386,
      "message": "Function 'interactive_analytics' has high complexity (cc=36).",
      "suggested_fix": "Refactor function to reduce complexity.",
      "evidence": "def interactive_analytics():\n    \"\"\"\n    Interactive function to explore your YouTube analytics.\n    \"\"\"\n    # Authenticate and build the service\n    youtube, youtube_analytics = get_authenticated_ser"
    },
    {
      "id": "JS-TEST-f7be7ce5",
      "category": "testing",
      "severity": "missing",
      "score": 45,
      "file": "/Users/chinmaychaudhari/Desktop/Recusion/shortGen",
      "lineno": null,
      "message": "No tests detected (no package.json test script or test files).",
      "suggested_fix": "Add unit tests and a test script to package.json.",
      "evidence": "No tests found"
    }
  ],
  "files": {
    "app.py": {
      "functions": [
        {
          "name": "create_app",
          "lineno": 23,
          "arg_count": 0,
          "decorators": [],
          "cc": 1
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "54d2621ce4af75bffa1aebd9d05b466621e73ca5e700d0eda711446ed1c07321"
      ]
    },
    "core/clipper.py": {
      "functions": [
        {
          "name": "save_highlight_clips",
          "lineno": 6,
          "arg_count": 3,
          "decorators": [],
          "cc": 3
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "df5945af2384c00135bd5cebc084b402727715f731fc6d3c371a126c8fa568a3"
      ]
    },
    "core/video_processor.py": {
      "functions": [
        {
          "name": "process_video",
          "lineno": 22,
          "arg_count": 5,
          "decorators": [],
          "cc": 33
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "45141f15a6f7e0e8f378446daaf22670dc164fc18c1c3a544edd7007296bc4ff"
      ]
    },
    "core/scoring.py": {
      "functions": [
        {
          "name": "normalize_scores",
          "lineno": 1,
          "arg_count": 1,
          "decorators": [],
          "cc": 6
        },
        {
          "name": "merge_scores",
          "lineno": 13,
          "arg_count": 5,
          "decorators": [],
          "cc": 5
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "30f6b6df0500093011dc3d1e99fe9a52239e448d8aa5642ed42092fffbebda10",
        "c3590de54d32bb96a0e3eb062dd35bbcaec05bc5611c9a0aedc51b2afd2b64d0"
      ]
    },
    "config/config.py": {
      "functions": [],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": []
    },
    "features/scene_intensity.py": {
      "functions": [
        {
          "name": "analyze_scene_intensity",
          "lineno": 8,
          "arg_count": 2,
          "decorators": [],
          "cc": 4
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [
        {
          "id": "PY-SEC-2b0791f96540",
          "category": "security",
          "severity": "high",
          "file": "features/scene_intensity.py",
          "lineno": 12,
          "message": "Use of dangerous function 'eval'.",
          "evidence": "model.eval()",
          "suggested_fix": "Avoid using eval/exec; consider safer alternatives.",
          "score": 80
        }
      ],
      "duplication_hashes": [
        "b319abb963b9e26909d22d7d87ca618207b1537c34b5859995235eef576eb97c"
      ]
    },
    "features/scene_utils.py": {
      "functions": [
        {
          "name": "detect_scenes",
          "lineno": 9,
          "arg_count": 2,
          "decorators": [],
          "cc": 3
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "af02c3f3c3172ed94a239e3699656054c96fedbd042bf1b7f7da67cbfdb4a17f"
      ]
    },
    "features/sentiment_analysis.py": {
      "functions": [
        {
          "name": "analyze_sentiment",
          "lineno": 3,
          "arg_count": 1,
          "decorators": [],
          "cc": 3
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "c2721da153182abbdf99df37e69450a7ae675193107f86771489b395d8bb3de6"
      ]
    },
    "features/audio_utils.py": {
      "functions": [
        {
          "name": "extract_and_transcribe_audio",
          "lineno": 7,
          "arg_count": 3,
          "decorators": [],
          "cc": 3
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "dc743925f29bbce58b19f842e4b4a82e819d64496dc563b584a9ccc01d80aa48"
      ]
    },
    "utils/process_video_and_score.py": {
      "functions": [
        {
          "name": "allowed_file",
          "lineno": 33,
          "arg_count": 1,
          "decorators": [],
          "cc": 2
        },
        {
          "name": "merge_scores",
          "lineno": 36,
          "arg_count": 5,
          "decorators": [],
          "cc": 6
        },
        {
          "name": "process_video",
          "lineno": 115,
          "arg_count": 5,
          "decorators": [],
          "cc": 33
        },
        {
          "name": "normalize_scores",
          "lineno": 51,
          "arg_count": 1,
          "decorators": [],
          "cc": 6
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "ddadffe98cf031cb128e247d7235c7fac330aa01d9f2a0233ffdea27ff490031",
        "dbf466fa1a3eabc37900e6fb8daf90e1d4ce697ed276598471dd2059710a70a4",
        "be9172e18489b08bb2f75bba5de4f6b84f9564c10683847693b45a4218e2b6b0",
        "0fc37d8d0be18d537d6d6257954003d2d9610f43196862c73a57c59c6cc1fd59"
      ]
    },
    "utils/scene_intensity.py": {
      "functions": [
        {
          "name": "analyze_scene_intensity",
          "lineno": 8,
          "arg_count": 2,
          "decorators": [],
          "cc": 4
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [
        {
          "id": "PY-SEC-70ee9d6690bf",
          "category": "security",
          "severity": "high",
          "file": "utils/scene_intensity.py",
          "lineno": 12,
          "message": "Use of dangerous function 'eval'.",
          "evidence": "model.eval()",
          "suggested_fix": "Avoid using eval/exec; consider safer alternatives.",
          "score": 80
        }
      ],
      "duplication_hashes": [
        "b319abb963b9e26909d22d7d87ca618207b1537c34b5859995235eef576eb97c"
      ]
    },
    "utils/sentiment_analysis.py": {
      "functions": [
        {
          "name": "analyze_sentiment",
          "lineno": 3,
          "arg_count": 1,
          "decorators": [],
          "cc": 3
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "c2721da153182abbdf99df37e69450a7ae675193107f86771489b395d8bb3de6"
      ]
    },
    "utils/utils.py": {
      "functions": [
        {
          "name": "allowed_file",
          "lineno": 4,
          "arg_count": 1,
          "decorators": [],
          "cc": 2
        },
        {
          "name": "ensure_directories",
          "lineno": 8,
          "arg_count": 0,
          "decorators": [],
          "cc": 1
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "d8f416b1136fa04d87eb4bc607b885028bce3301da35c0826e5683fd6937ad2a",
        "334606471a4ef1aac064f30802397ca28ee2f53bc288647d92546445e0eff1fc"
      ]
    },
    "utils/youtube_uploader.py": {
      "functions": [
        {
          "name": "authenticate_youtube",
          "lineno": 21,
          "arg_count": 3,
          "decorators": [],
          "cc": 8
        },
        {
          "name": "upload_video",
          "lineno": 70,
          "arg_count": 6,
          "decorators": [],
          "cc": 6
        },
        {
          "name": "get_authenticated_service",
          "lineno": 151,
          "arg_count": 0,
          "decorators": [],
          "cc": 7
        },
        {
          "name": "get_authenticated_channel_id",
          "lineno": 182,
          "arg_count": 1,
          "decorators": [],
          "cc": 4
        },
        {
          "name": "get_all_video_ids",
          "lineno": 207,
          "arg_count": 1,
          "decorators": [],
          "cc": 5
        },
        {
          "name": "get_video_analytics",
          "lineno": 265,
          "arg_count": 5,
          "decorators": [],
          "cc": 2
        },
        {
          "name": "get_channel_analytics",
          "lineno": 302,
          "arg_count": 4,
          "decorators": [],
          "cc": 2
        },
        {
          "name": "convert_analytics_to_dataframe",
          "lineno": 337,
          "arg_count": 1,
          "decorators": [],
          "cc": 5
        },
        {
          "name": "analyze_video_performance",
          "lineno": 352,
          "arg_count": 1,
          "decorators": [],
          "cc": 6
        },
        {
          "name": "interactive_analytics",
          "lineno": 386,
          "arg_count": 0,
          "decorators": [],
          "cc": 36
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "fc9020273f4f1222cd0168a7ea2a2d7c9e0998a0f7b9055cd89529a9fff2c2b8",
        "852953f7121b2878133bf96e7306f9a73d434cb3a522d9329dd9cf83830cb20c",
        "7eb14f4b9d88069884f1a51b4f3cfe5e2cfea1c994e2b2ddf484dc176d6fb2b0",
        "9e6e4c869ac8a7d788eceb0f0d54b71e8854111816e43fa514568f09e74be790",
        "599c7aefb44981b0684c304e76cf5ddf00840ce43b7195d175d9da3e41e05052",
        "29908c346f07bea07b7f6b4d8b76aaaefe2d8f13fa07e796984a59366a10c62c",
        "fb991a0fdb09f9d17c3639e1e5a69daed89990d98185055b9ae83cc2e71d6aea",
        "1690791db0ef9b645717933e8660f9b35adda164915082ecbf8e82a8dbcce04d",
        "f27f5390cfb8947aff8310c3fca6e3bdb55899eaefc452930a04eb051bf9c4e0",
        "d84ed9ef15bf06835a346c480ae7078b80ea87686378922bd81a956395d15e96"
      ]
    },
    "api/video_routes.py": {
      "functions": [
        {
          "name": "upload_videoo",
          "lineno": 19,
          "arg_count": 0,
          "decorators": [],
          "cc": 5
        },
        {
          "name": "get_job_status",
          "lineno": 63,
          "arg_count": 1,
          "decorators": [],
          "cc": 2
        },
        {
          "name": "get_job_results",
          "lineno": 75,
          "arg_count": 1,
          "decorators": [],
          "cc": 5
        },
        {
          "name": "download_file",
          "lineno": 107,
          "arg_count": 2,
          "decorators": [],
          "cc": 4
        },
        {
          "name": "get_transcript",
          "lineno": 123,
          "arg_count": 1,
          "decorators": [],
          "cc": 3
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "54d5d5a904e2dd1c65f33551c1c591f911426841500acb5b0779776dd16c395b",
        "960f2ec3ff9016b319f7702800043d4b8cf98d861490ab6546381bde1c4db662",
        "f8303d7bcacb4bb5552b3955aa6802e703a191893503993ff504da1ebbe1bc47",
        "99a381d21238fd2310b983ed37c5f9e44d108701c3c5e219da4bae2fdc7c1f66",
        "a23aadad671b11e7da082e164ec884d4c2c44e92f23ca4b1221b8ff0441a1699"
      ]
    },
    "api/youtube_routes.py": {
      "functions": [
        {
          "name": "upload_to_youtube",
          "lineno": 42,
          "arg_count": 0,
          "decorators": [],
          "cc": 13
        },
        {
          "name": "authenticate",
          "lineno": 156,
          "arg_count": 0,
          "decorators": [],
          "cc": 2
        },
        {
          "name": "get_channel_overview",
          "lineno": 165,
          "arg_count": 0,
          "decorators": [],
          "cc": 3
        },
        {
          "name": "get_video_performance",
          "lineno": 192,
          "arg_count": 0,
          "decorators": [],
          "cc": 4
        },
        {
          "name": "get_all_videos",
          "lineno": 223,
          "arg_count": 0,
          "decorators": [],
          "cc": 2
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "994b9f221365dea2e0d24dd1d67356eb662682043e6674a99b73ccb62e56d90c",
        "8bef10613d4d70e311bb4dc990ed86ee7f2c32399479ddc740b51cb76b7ab79f",
        "e6eb334c4d2c4305980af1efecd8a19a27efdb0ee155822f93537d95b68849de",
        "18bea3291c05e4d94c6676dc7953679f1bba7f29a611518930244af822e76f20",
        "ecf68892f4ab32ace2a9676b8b57a2c77b3530c84f5c3040053ce80338aec895"
      ]
    },
    "api/health_routes.py": {
      "functions": [
        {
          "name": "cleanup_old_jobs",
          "lineno": 13,
          "arg_count": 0,
          "decorators": [],
          "cc": 7
        },
        {
          "name": "health_check",
          "lineno": 39,
          "arg_count": 0,
          "decorators": [],
          "cc": 1
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "56e2a88195a4eea100538aa72229818841e1e1cd9c81a8aae52e87a3806fd834",
        "a7b293e937250e67b4c12396b76241fced0f811577c7ae1c2148735385cbfd3d"
      ]
    },
    "jobs/job_manager.py": {
      "functions": [],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": []
    },
    "services/youtube_uploader.py": {
      "functions": [
        {
          "name": "authenticate_youtube",
          "lineno": 21,
          "arg_count": 3,
          "decorators": [],
          "cc": 8
        },
        {
          "name": "upload_video",
          "lineno": 70,
          "arg_count": 6,
          "decorators": [],
          "cc": 6
        },
        {
          "name": "get_authenticated_service",
          "lineno": 151,
          "arg_count": 0,
          "decorators": [],
          "cc": 7
        },
        {
          "name": "get_authenticated_channel_id",
          "lineno": 182,
          "arg_count": 1,
          "decorators": [],
          "cc": 4
        },
        {
          "name": "get_all_video_ids",
          "lineno": 207,
          "arg_count": 1,
          "decorators": [],
          "cc": 5
        },
        {
          "name": "get_video_analytics",
          "lineno": 265,
          "arg_count": 5,
          "decorators": [],
          "cc": 2
        },
        {
          "name": "get_channel_analytics",
          "lineno": 302,
          "arg_count": 4,
          "decorators": [],
          "cc": 2
        },
        {
          "name": "convert_analytics_to_dataframe",
          "lineno": 337,
          "arg_count": 1,
          "decorators": [],
          "cc": 5
        },
        {
          "name": "analyze_video_performance",
          "lineno": 352,
          "arg_count": 1,
          "decorators": [],
          "cc": 6
        },
        {
          "name": "interactive_analytics",
          "lineno": 386,
          "arg_count": 0,
          "decorators": [],
          "cc": 36
        }
      ],
      "classes": [],
      "todos": [],
      "security_warnings": [],
      "duplication_hashes": [
        "fc9020273f4f1222cd0168a7ea2a2d7c9e0998a0f7b9055cd89529a9fff2c2b8",
        "852953f7121b2878133bf96e7306f9a73d434cb3a522d9329dd9cf83830cb20c",
        "7eb14f4b9d88069884f1a51b4f3cfe5e2cfea1c994e2b2ddf484dc176d6fb2b0",
        "9e6e4c869ac8a7d788eceb0f0d54b71e8854111816e43fa514568f09e74be790",
        "599c7aefb44981b0684c304e76cf5ddf00840ce43b7195d175d9da3e41e05052",
        "29908c346f07bea07b7f6b4d8b76aaaefe2d8f13fa07e796984a59366a10c62c",
        "fb991a0fdb09f9d17c3639e1e5a69daed89990d98185055b9ae83cc2e71d6aea",
        "1690791db0ef9b645717933e8660f9b35adda164915082ecbf8e82a8dbcce04d",
        "f27f5390cfb8947aff8310c3fca6e3bdb55899eaefc452930a04eb051bf9c4e0",
        "d84ed9ef15bf06835a346c480ae7078b80ea87686378922bd81a956395d15e96"
      ]
    }
  },
  "recommendations": [
    "Refactor function in `core/video_processor.py` at line 22 to reduce complexity.",
    "Address security issue in `features/scene_intensity.py:12` - Use of dangerous function 'eval'..",
    "Refactor function in `utils/process_video_and_score.py` at line 115 to reduce complexity.",
    "Address security issue in `utils/scene_intensity.py:12` - Use of dangerous function 'eval'..",
    "Refactor function in `utils/youtube_uploader.py` at line 386 to reduce complexity."
  ],
  "markdown": "# Code Quality Report\n\n**Overall Score:** 85/100\n\n## Top Issues\n\n| ID | Severity | Location | Message |\n|----|----------|----------|---------|\n| PY-CPLX-5ed12b5b9a59 | high | core/video_processor.py:22 | Function 'process_video' has high complexity (cc=33). |\n| PY-SEC-2b0791f96540 | high | features/scene_intensity.py:12 | Use of dangerous function 'eval'. |\n| PY-CPLX-b8efa0537e7c | high | utils/process_video_and_score.py:115 | Function 'process_video' has high complexity (cc=33). |\n| PY-SEC-70ee9d6690bf | high | utils/scene_intensity.py:12 | Use of dangerous function 'eval'. |\n| PY-CPLX-7a797b2aebdb | high | utils/youtube_uploader.py:386 | Function 'interactive_analytics' has high complexity (cc=36). |\n\n## Recommendations\n\n- Refactor function in `core/video_processor.py` at line 22 to reduce complexity.\n- Address security issue in `features/scene_intensity.py:12` - Use of dangerous function 'eval'..\n- Refactor function in `utils/process_video_and_score.py` at line 115 to reduce complexity.\n- Address security issue in `utils/scene_intensity.py:12` - Use of dangerous function 'eval'..\n- Refactor function in `utils/youtube_uploader.py` at line 386 to reduce complexity."
}